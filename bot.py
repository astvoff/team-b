import os
import logging
from datetime import datetime
import pytz
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

logging.basicConfig(level=logging.INFO)

TOKEN = os.environ.get('TOKEN')
CHAT_ID = int(os.environ.get('CHAT_ID'))

# –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∏—î–≤–∞
kyiv_tz = pytz.timezone('Europe/Kyiv')

# –†–æ–∑–∫–ª–∞–¥ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
reminders = {
    "10:00": "–ù–µ –∑–∞–±—É–¥—å –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Å—É –¢–û–í üëª",
    "10:15": "–ü–µ—Ä–µ–≤—ñ—Ä –ø—Ä–æ–ø—É—â–µ–Ω—ñ Binotel –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∞ –∑–∞ –≤—á–æ—Ä–∞ üìû",
    "12:00": "–©–æ —Ç–∞–º OLX üëÄ –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì©",
    "12:10": "–ß–∞—Å —Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞—Å—É üëª",
    "14:30": "–©–æ —Ç–∞–º OLX üëÄ –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì©",
    "15:00": "–ß–∞—Å —Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞—Å—É üëª",
    "17:30": "–ü–µ—Ä–µ–≤—ñ—Ä —á–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö, —Ç–∞ –ø—Ä–æ—Ç—Ä–∏ —ó—Ö, —è–∫—â–æ –≤–æ–Ω–∏ –±—Ä—É–¥–Ω—ñ üëæ",
    "18:30": "–ß–∞—Å —Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞—Å—É üëª",
    "19:30": "–©–æ —Ç–∞–º OLX üëÄ –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì©",
}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –ø—Ä–∞—Ü—é—î –ø–æ –ö–∏—î–≤—É üï∞Ô∏è")

# –©–æ—Ö–≤–∏–ª–∏–Ω–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É
async def check_reminders(context: ContextTypes.DEFAULT_TYPE):
    now_kyiv = datetime.now(kyiv_tz).strftime("%H:%M")
    if now_kyiv in reminders:
        text = reminders[now_kyiv]
        await context.bot.send_message(chat_id=CHAT_ID, text=text)

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —â–æ—Ö–≤–∏–ª–∏–Ω–∏
    app.job_queue.run_repeating(check_reminders, interval=60, first=0)

    logging.info("–ë–æ—Ç —ñ–∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏ –ø–æ –ö–∏—î–≤—É –∑–∞–ø—É—â–µ–Ω–æ.")
    app.run_polling()

if __name__ == '__main__':
    main()