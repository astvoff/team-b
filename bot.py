import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

TOKEN = os.environ.get('TOKEN')

logging.basicConfig(level=logging.INFO)

INSTRUCTION_TEXT = """
üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è:

üî∏ –ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è:
- –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–º—ñ–Ω—É –¢–û–í
- –ó–≤–µ—Å—Ç–∏ –∫–∞—Å—É –Ω–∞ —Ä–∞–Ω–æ–∫
- –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ñ Binotel
- –†–∞–Ω–∫–æ–≤–µ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è:
  1. –ü—Ä–æ—Ç–µ—Ä—Ç–∏ —Å–∫–ª–æ –≤—ñ—Ç—Ä–∏–Ω
  2. –ó—Ä–æ–±–∏—Ç–∏ –≤–æ–ª–æ–≥–µ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –ø–æ–≤–µ—Ä—Ö–æ–Ω—å
  3. –ü—Ä–æ—Ç–µ—Ä—Ç–∏ —á–æ—Ö–ª–∏ –≤—ñ–¥ –ø–∏–ª—É
  4. –ü—Ä–∏–±—Ä–∞—Ç–∏ –¥–∏—Ç—è—á—É –∑–æ–Ω—É
  5. –ü–æ–º–∏—Ç–∏ –ø—ñ–¥–ª–æ–≥—É

üî∏ –ü—ñ–¥—Å–æ–±–∫–∞:
  1. –ü–æ—Ä—è–¥–æ–∫ –Ω–∞ —Å—Ç–µ–ª–∞–∂–∞—Ö
  2. –ü–æ—Ä—è–¥–æ–∫ –Ω–∞ —Ä–æ–±–æ—á–æ–º—É —Å—Ç–æ–ª—ñ
  3. –ü–æ—Ä—è–¥–æ–∫ —É –∫–∞—Å–æ–≤—ñ–π –∑–æ–Ω—ñ
  4. –í—ñ–¥–Ω–µ—Å—Ç–∏ —Ç–µ—Ö–Ω—ñ–∫—É –Ω–∞ —Å–∫–ª–∞–¥
"""

tasks_by_shift = {
    "6": {
        "1": ["–ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞", "–ó–∞–ø–∏—Ç–∏ '–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞'", "–ó–∞–ø–∏—Ç–∏ '–ê–∫—Å–∏'"]
    },
    "7": {
        "1": ["–ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞", "–ó–∞–ø–∏—Ç–∏ '–ê–∫—Å–∏'"],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ '–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞'", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"]
    },
    "8": {
        "1": ["–ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞"],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ '–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞'", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "8": ["–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ó–∞–ø–∏—Ç–∏ '–ê–∫—Å–∏'"]
    },
    "9": {
        "1": ["–ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞"],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ '–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞'", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "8": ["–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ó–∞–ø–∏—Ç–∏ '–ê–∫—Å–∏'"],
        "9": ["–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤"]
    }
}

user_state = {}

# START
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [[KeyboardButton(i)] for i in ["6", "7", "8", "9"]]
    await update.message.reply_text(
        "üë• –°–∫—ñ–ª—å–∫–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –Ω–∞ –∑–º—ñ–Ω—ñ?",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    user_state[update.effective_chat.id] = {}

# –û–ë–†–û–ë–ö–ê –ö–Ü–õ–¨–ö–û–°–¢–Ü
async def handle_workers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text not in tasks_by_shift:
        return await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 6 –¥–æ 9.")
    
    user_state[update.effective_chat.id]["workers"] = text
    blocks = tasks_by_shift[text].keys()
    buttons = [[KeyboardButton(str(i))] for i in blocks] + [[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
    await update.message.reply_text(
        "üî¢ –û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –±–ª–æ–∫:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

# –û–ë–†–û–ë–ö–ê –ë–õ–û–ö–£
async def handle_blocks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await start(update, context)
    
    chat_id = update.effective_chat.id
    workers = user_state[chat_id].get("workers")
    if text not in tasks_by_shift[workers]:
        return await update.message.reply_text("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –±–ª–æ–∫—É.")

    user_state[chat_id]["block"] = text
    tasks = tasks_by_shift[workers][text]
    buttons = [[KeyboardButton(t)] for t in tasks] + [[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
    await update.message.reply_text(
        "‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –±–ª–æ–∫—É:\n" + "\n".join(f"‚Äì {t}" for t in tasks),
    )
    await update.message.reply_text(
        "üîΩ –ó —è–∫–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∏ –ø–æ—á–Ω–µ—à?",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

# –û–ë–†–û–ë–ö–ê –ó–ê–í–î–ê–ù–ù–Ø
async def handle_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await handle_workers(update, context)

    task = update.message.text
    await update.message.reply_text(f"üõ†Ô∏è –û–±—Ä–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: *{task}*", parse_mode='Markdown')
    await update.message.reply_text(INSTRUCTION_TEXT)
    buttons = [[KeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ")], [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
    await update.message.reply_text(
        "–ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω–∏ ¬´‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ¬ª",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

# –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø
async def handle_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await handle_blocks(update, context)
    if update.message.text == "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ":
        await update.message.reply_text("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return await start(update, context)

# MAIN
async def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^(6|7|8|9)$"), handle_workers))
    app.add_handler(MessageHandler(filters.Regex("^[1-9]$"), handle_blocks))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_tasks))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_done))
    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.get_event_loop().run_until_complete(main())