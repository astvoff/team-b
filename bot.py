import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import time

TOKEN = os.environ.get('TOKEN')
CHAT_ID = int(os.environ.get('CHAT_ID'))

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü—Ä–∏–≤—ñ—Ç, —è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –∫–æ–º–∞–Ω–¥.')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n/start - –∑–∞–ø—É—Å–∫\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥')

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    message = context.job.data['text']
    await context.bot.send_message(chat_id=context.job.data['chat_id'], text=message)

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))

    reminders = [
        {"time": time(10, 0), "text": "–ù–µ –∑–∞–±—É–¥—å –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Å—É –¢–û–í üëª"},
        {"time": time(10, 15), "text": "–ü–µ—Ä–µ–≤—ñ—Ä –ø—Ä–æ–ø—É—â–µ–Ω—ñ Binotel –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∞ –∑–∞ –≤—á–æ—Ä–∞ üìû"},
        {"time": time(12, 0), "text": "–©–æ —Ç–∞–º OLX üëÄ –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì©"},
        {"time": time(12, 10), "text": "–ß–∞—Å —Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞—Å—É üëª"},
        {"time": time(14, 30), "text": "–©–æ —Ç–∞–º OLX üëÄ –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì©"},
        {"time": time(15, 0), "text": "–ß–∞—Å —Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞—Å—É üëª"},
        {"time": time(17, 30), "text": "–ü–µ—Ä–µ–≤—ñ—Ä —á–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö, —Ç–∞ –ø—Ä–æ—Ç—Ä–∏ —ó—Ö, —è–∫—â–æ –≤–æ–Ω–∏ –±—Ä—É–¥–Ω—ñ üëæ"},
        {"time": time(18, 30), "text": "–ß–∞—Å —Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞—Å—É üëª"},
        {"time": time(19, 30), "text": "–©–æ —Ç–∞–º OLX üëÄ –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì©"},
    ]

    for reminder in reminders:
        app.job_queue.run_daily(
            send_reminder,
            reminder['time'],
            data={"chat_id": CHAT_ID, "text": reminder['text']},
            timezone="Europe/Kyiv"
        )

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())