import os
import datetime
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

TOKEN = os.environ.get("TOKEN")
user_state = {}
daily_blocks_taken = {}  # {date: {block_number: username}}

INSTRUCTION = """üßæ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–æ ¬´–ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è¬ª:
‚Ä¢ –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–º—ñ–Ω—É –¢–û–í
‚Ä¢ –ó–≤–µ—Å—Ç–∏ –∫–∞—Å—É –Ω–∞ —Ä–∞–Ω–æ–∫
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ñ Binotel
‚Ä¢ –†–∞–Ω–∫–æ–≤–µ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è:
   - –ü—Ä–æ—Ç–µ—Ä—Ç–∏ —Å–∫–ª–æ
   - –í–æ–ª–æ–≥–µ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –ø–æ–≤–µ—Ä—Ö–æ–Ω—å
   - –ü—Ä–æ—Ç–µ—Ä—Ç–∏ —á–æ—Ö–ª–∏
   - –ü—Ä–∏–±—Ä–∞—Ç–∏ –¥–∏—Ç—è—á—É –∑–æ–Ω—É
   - –ü–æ–º–∏—Ç–∏ –ø—ñ–¥–ª–æ–≥—É
‚Ä¢ –ü—ñ–¥—Å–æ–±–∫–∞:
   - –ü–æ—Ä—è–¥–æ–∫ –Ω–∞ —Å—Ç–µ–ª–∞–∂–∞—Ö, —Å—Ç–æ–ª—ñ, –∫–∞—Å—ñ
   - –í—ñ–¥–Ω–µ—Å—Ç–∏ —Ç–µ—Ö–Ω—ñ–∫—É –Ω–∞ —Å–∫–ª–∞–¥
"""

TASKS = {
    6: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""],
    },
    7: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
    },
    8: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞"],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "8": ["–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""]
    },
    9: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞"],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "8": ["–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""],
        "9": ["–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤"]
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state[update.effective_user.id] = {"step": "start", "done": []}
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å, –Ω–∞—Ç–∏—Å–Ω–∏:",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å")]],
            resize_keyboard=True,
        ),
    )

async def handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or f"id_{user_id}"
    text = update.message.text
    state = user_state.get(user_id, {})
    step = state.get("step", "start")

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await go_back(update)

    if text == "üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å":
        user_state[user_id]["step"] = "workers"
        return await update.message.reply_text(
            "–°–∫—ñ–ª—å–∫–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞ –∑–º—ñ–Ω—ñ?",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton(str(n))] for n in range(6, 10)],
                resize_keyboard=True,
            ),
        )

    if step == "workers":
        if text.isdigit() and int(text) in TASKS:
            user_state[user_id]["workers"] = int(text)
            user_state[user_id]["step"] = "block"
            return await show_blocks(update)
        else:
            return await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 6 –¥–æ 9")

    if step == "block":
        today = str(datetime.date.today())
        block_taken = daily_blocks_taken.get(today, {})
        if block_taken.get(text):
            return await update.message.reply_text("‚õî –¶–µ–π –±–ª–æ–∫ —É–∂–µ –∑–∞–π–Ω—è—Ç–æ —ñ–Ω—à–∏–º –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–æ–º —Å—å–æ–≥–æ–¥–Ω—ñ.")
        user_state[user_id]["selected_block"] = text
        user_state[user_id]["step"] = "confirm_block"
        return await update.message.reply_text(f"–í–∏ —Ç–æ—á–Ω–æ –æ–±—Ä–∞–ª–∏ –±–ª–æ–∫ {text}?", reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("‚úÖ –¢–∞–∫")], [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        ))

    if step == "confirm_block":
        if text == "‚úÖ –¢–∞–∫":
            block = user_state[user_id]["selected_block"]
            today = str(datetime.date.today())
            daily_blocks_taken.setdefault(today, {})[block] = username
            user_state[user_id]["block"] = block
            user_state[user_id]["step"] = "tasks"
            return await show_tasks(update)
        else:
            user_state[user_id]["step"] = "block"
            return await show_blocks(update)

    if step == "tasks":
        if text.startswith("‚úÖ"):
            return
        user_state[user_id]["current_task"] = text
        user_state[user_id]["step"] = "in_task"
        if "–ß–µ—Ä–≥" in text:
            await update.message.reply_text(INSTRUCTION)
        return await update.message.reply_text(
            f"–ó–∞–≤–¥–∞–Ω–Ω—è: {text}",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ")], [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True,
            ),
        )

    if step == "in_task" and text == "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ":
        task = user_state[user_id]["current_task"]
        user_state[user_id].setdefault("done", []).append((task, datetime.datetime.now()))
        user_state[user_id]["step"] = "tasks"
        return await show_tasks(update)

    if text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–µ–Ω—å":
        return await end_day(update)

async def go_back(update):
    user_id = update.effective_user.id
    step = user_state[user_id].get("step")
    if step == "block":
        user_state[user_id]["step"] = "workers"
        return await update.message.reply_text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤")
    elif step == "confirm_block":
        user_state[user_id]["step"] = "block"
        return await show_blocks(update)
    elif step == "tasks":
        user_state[user_id]["step"] = "block"
        return await show_blocks(update)
    elif step == "in_task":
        user_state[user_id]["step"] = "tasks"
        return await show_tasks(update)

async def show_blocks(update):
    user_id = update.effective_user.id
    blocks = TASKS[user_state[user_id]["workers"]].keys()
    buttons = [[KeyboardButton(b)] for b in blocks]
    return await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –±–ª–æ–∫:", reply_markup=ReplyKeyboardMarkup(buttons + [[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))

async def show_tasks(update):
    user_id = update.effective_user.id
    workers = user_state[user_id]["workers"]
    block = user_state[user_id]["block"]
    done = [task for task, _ in user_state[user_id].get("done", [])]
    tasks = TASKS[workers][block]
    buttons = []
    for t in tasks:
        label = f"‚úÖ {t}" if t in done else t
        buttons.append([KeyboardButton(label)])
    buttons.append([KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–µ–Ω—å")])
    return await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))

async def end_day(update):
    user_id = update.effective_user.id
    username = update.effective_user.username or f"id_{user_id}"
    done_tasks = user_state[user_id].get("done", [])
    summary = f"–ó–≤—ñ—Ç –¥–ª—è @{username}:\n"
    for task, t in done_tasks:
        summary += f"‚Ä¢ {task} ‚Äî {t.strftime('%H:%M')}\n"
    await update.message.reply_text(summary)
    user_state[user_id] = {"step": "start", "done": []}
    return await update.message.reply_text("‚úÖ –î–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ.")

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle))
    app.run_polling()

if __name__ == "__main__":
    main()