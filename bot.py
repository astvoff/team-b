import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = os.environ.get('TOKEN')

# –ü—Ä–∏–∫–ª–∞–¥–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≤–¥–∞–Ω—å –ø–æ –±–ª–æ–∫–∞—Ö
TASKS = {
    6: {
        1: ["–ó–∞–≤–¥–∞–Ω–Ω—è 1.1", "–ó–∞–≤–¥–∞–Ω–Ω—è 1.2"],
        2: ["–ó–∞–≤–¥–∞–Ω–Ω—è 2.1", "–ó–∞–≤–¥–∞–Ω–Ω—è 2.2"],
        3: ["–ó–∞–≤–¥–∞–Ω–Ω—è 3.1", "–ó–∞–≤–¥–∞–Ω–Ω—è 3.2"],
        4: ["–ó–∞–≤–¥–∞–Ω–Ω—è 4.1", "–ó–∞–≤–¥–∞–Ω–Ω—è 4.2"],
        5: ["–ó–∞–≤–¥–∞–Ω–Ω—è 5.1", "–ó–∞–≤–¥–∞–Ω–Ω—è 5.2"],
        6: ["–ó–∞–≤–¥–∞–Ω–Ω—è 6.1", "–ó–∞–≤–¥–∞–Ω–Ω—è 6.2"],
    },
    7: {
        1: ["–ó–∞–≤–¥–∞–Ω–Ω—è 1.1", "–ó–∞–≤–¥–∞–Ω–Ω—è 1.2"],
        7: ["–ó–∞–≤–¥–∞–Ω–Ω—è 7.1", "–ó–∞–≤–¥–∞–Ω–Ω—è 7.2"],
    },
    8: {
        1: ["–ó–∞–≤–¥–∞–Ω–Ω—è 1.1", "–ó–∞–≤–¥–∞–Ω–Ω—è 1.2"],
        8: ["–ó–∞–≤–¥–∞–Ω–Ω—è 8.1", "–ó–∞–≤–¥–∞–Ω–Ω—è 8.2"],
    },
    9: {
        1: ["–ó–∞–≤–¥–∞–Ω–Ω—è 1.1", "–ó–∞–≤–¥–∞–Ω–Ω—è 1.2"],
        9: ["–ó–∞–≤–¥–∞–Ω–Ω—è 9.1", "–ó–∞–≤–¥–∞–Ω–Ω—è 9.2"],
    },
}

# –ó–∞–ø—É—Å–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("6 –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤", callback_data="workers_6")],
        [InlineKeyboardButton("7 –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤", callback_data="workers_7")],
        [InlineKeyboardButton("8 –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤", callback_data="workers_8")],
        [InlineKeyboardButton("9 –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤", callback_data="workers_9")],
    ]
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –Ω–∞ –∑–º—ñ–Ω—ñ:", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤
async def select_workers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    workers = int(query.data.split("_")[1])
    context.user_data["workers"] = workers

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –±–ª–æ–∫—É
    keyboard = []
    for block in range(1, workers + 1):
        keyboard.append([InlineKeyboardButton(f"–ë–ª–æ–∫ {block}", callback_data=f"block_{block}")])

    await query.edit_message_text(
        text=f"–í–∏–±—Ä–∞–Ω–æ {workers} –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤. –¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –±–ª–æ–∫:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –±–ª–æ–∫—É
async def select_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    block = int(query.data.split("_")[1])
    workers = context.user_data.get("workers", 6)

    tasks = TASKS.get(workers, {}).get(block, ["–ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å –¥–ª—è —Ü—å–æ–≥–æ –±–ª–æ–∫—É"])

    await query.edit_message_text(
        text=f"–í–∞—à—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –±–ª–æ–∫—É {block}:\n" + "\n".join(f"üîπ {task}" for task in tasks)
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(select_workers, pattern=r"^workers_\d+$"))
    app.add_handler(CallbackQueryHandler(select_block, pattern=r"^block_\d+$"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    app.run_polling()

if __name__ == '__main__':
    main()