import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, JobQueue
from datetime import time
from zoneinfo import ZoneInfo

logging.basicConfig(level=logging.INFO)

TOKEN = os.environ.get('TOKEN')
CHAT_ID = int(os.environ.get('CHAT_ID'))  # –∑ Environment Variables

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –ø—Ä–∞—Ü—é—î. –Ø –≥–æ—Ç–æ–≤–∏–π –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    message = context.job.data['text']
    await context.bot.send_message(chat_id=CHAT_ID, text=message)

def main():
    # –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å–æ–≤—É –∑–æ–Ω—É
    kyiv_timezone = ZoneInfo("Europe/Kyiv")

    # —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –∑ —á–∞—Å–æ–≤–æ—é –∑–æ–Ω–æ—é
    app = ApplicationBuilder().token(TOKEN).timezone(kyiv_timezone).build()

    # –¥–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ /start
    app.add_handler(CommandHandler("start", start))

    # –ø–µ—Ä–µ–ª—ñ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    reminders = [
        {"time": time(10, 0), "text": "–ù–µ –∑–∞–±—É–¥—å –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Å—É –¢–û–í üëª"},
        {"time": time(10, 15), "text": "–ü–µ—Ä–µ–≤—ñ—Ä –ø—Ä–æ–ø—É—â–µ–Ω—ñ Binotel –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∞ –∑–∞ –≤—á–æ—Ä–∞ üìû"},
        {"time": time(12, 0), "text": "–©–æ —Ç–∞–º OLX üëÄ –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì©"},
        {"time": time(12, 10), "text": "–ß–∞—Å —Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞—Å—É üëª"},
        {"time": time(14, 30), "text": "–©–æ —Ç–∞–º OLX üëÄ –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì©"},
        {"time": time(15, 0), "text": "–ß–∞—Å —Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞—Å—É üëª"},
        {"time": time(17, 30), "text": "–ü–µ—Ä–µ–≤—ñ—Ä —á–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö, —Ç–∞ –ø—Ä–æ—Ç—Ä–∏ —ó—Ö, —è–∫—â–æ –≤–æ–Ω–∏ –±—Ä—É–¥–Ω—ñ üëæ"},
        {"time": time(18, 30), "text": "–ß–∞—Å —Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞—Å—É üëª"},
        {"time": time(19, 30), "text": "–©–æ —Ç–∞–º OLX üëÄ –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì©"},
    ]

    # –¥–æ–¥–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤ JobQueue
    for reminder in reminders:
        app.job_queue.run_daily(
            send_reminder,
            reminder['time'],
            data={"text": reminder['text']}
        )

    logging.info("–ë–æ—Ç —ñ–∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏ –∑–∞–ø—É—â–µ–Ω–æ.")
    app.run_polling()

if __name__ == '__main__':
    main()