import os
import logging
import time
import asyncio
from collections import defaultdict
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv
from datetime import datetime, timedelta, timezone

# --- FSM –∫–ª–∞—Å–∏ ---
class ReminderFSM(StatesGroup):
    wait_text = State()
    wait_time = State()

class PollState(StatesGroup):
    waiting_question = State()
    waiting_options = State()
    waiting_type = State()
    waiting_target = State()
    waiting_username = State()
    waiting_datetime = State()
    confirm = State()

class ReportFSM(StatesGroup):
    waiting_date = State()
    
# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ---
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
SHEET_KEY = os.getenv('SHEET_KEY')
UA_TZ = timezone(timedelta(hours=3))  # –ö–∏—ó–≤
REMINDER_REPEAT_MINUTES = 30
ADMIN_NOTIFY_MINUTES = 40
ADMIN_IDS = [438830182]  # –ü–æ—Å—Ç–∞–≤ —Ç—É—Ç —Å–≤—ñ–π Telegram ID
logging.basicConfig(level=logging.INFO)

# --- Google Sheets ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
gs = gspread.authorize(creds)
TEMPLATE_SHEET = '–®–∞–±–ª–æ–Ω–∏ –±–ª–æ–∫—ñ–≤'
DAY_SHEET = '–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å'
INFORMATION_BASE_SHEET = '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –±–∞–∑–∞'
STAFF_SHEET = "–®—Ç–∞—Ç"
GENERAL_REMINDERS_SHEET = '–ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è'
POLL_SHEET = '–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è'

template_sheet = gs.open_by_key(SHEET_KEY).worksheet(TEMPLATE_SHEET)
day_sheet = gs.open_by_key(SHEET_KEY).worksheet(DAY_SHEET)
information_base_sheet = gs.open_by_key(SHEET_KEY).worksheet(INFORMATION_BASE_SHEET)
staff_sheet = gs.open_by_key(SHEET_KEY).worksheet(STAFF_SHEET)
general_reminders_sheet = gs.open_by_key(SHEET_KEY).worksheet(GENERAL_REMINDERS_SHEET)
poll_sheet = gs.open_by_key(SHEET_KEY).worksheet(POLL_SHEET)

# --- Telegram bot ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=UA_TZ)
user_sessions = {}

def now_ua():
    return datetime.now(timezone.utc).astimezone(UA_TZ)

def get_today():
    return now_ua().strftime('%Y-%m-%d')

def is_true(val):
    if isinstance(val, bool):
        return val is True
    if isinstance(val, str):
        return val.strip().lower() in ('true', 'yes', '1', 'y', '—Ç–∞–∫')
    return False

# --- –ó–∞—Ç—Ä–∏–º–∫–∞ –ø—ñ—Å–ª—è Google Sheets ---
def safe_update_cell(sheet, row, col, value):
    try:
        sheet.update_cell(row, col, value)
        time.sleep(1.1)
    except Exception as e:
        print(f"[safe_update_cell] Error: {e}")

def safe_append_rows(sheet, rows):
    try:
        sheet.append_rows(rows, value_input_option='USER_ENTERED')
        time.sleep(1.1)
    except Exception as e:
        print(f"[safe_append_rows] Error: {e}")

# --- –ì–û–õ–û–í–ù–ê –ó–ú–Ü–ù–ê –î–õ–Ø –í–°–¢–ê–í–û–ö: append_rows –∑–∞–º—ñ—Å—Ç—å insert_row! ---
def prepend_rows_to_sheet(sheet, rows):
    # –î–æ–¥–∞—î –≤—Å—ñ —Ä—è–¥–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º —É –∫—ñ–Ω–µ—Ü—å (–ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ)
    safe_append_rows(sheet, rows)

def copy_template_blocks_to_today(blocks_count):
    records = template_sheet.get_all_records()
    today = get_today()
    existing = day_sheet.get_all_records()
    for row in existing:
        if str(row["–î–∞—Ç–∞"]) == today and str(row["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–ª–æ–∫—ñ–≤"]) == str(blocks_count):
            return  # –≤–∂–µ —î ‚Äî –Ω–µ –¥–æ–¥–∞—î–º–æ
    new_rows = []
    for row in records:
        if str(row["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–ª–æ–∫—ñ–≤"]) == str(blocks_count):
            new_rows.append([
                today, row["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–ª–æ–∫—ñ–≤"], row["–ë–ª–æ–∫"], row["–ó–∞–≤–¥–∞–Ω–Ω—è"],
                row["–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"], row["–ß–∞—Å"], row.get("–û–ø–∏—Å", ""),
                "", "", ""  # Telegram ID, –Ü–º º—è, –í–∏–∫–æ–Ω–∞–Ω–æ
            ])
    if new_rows:
        prepend_rows_to_sheet(day_sheet, new_rows)

def get_blocks_for_today():
    today = get_today()
    records = day_sheet.get_all_records()
    return sorted(list(set(str(row["–ë–ª–æ–∫"]) for row in records if str(row["–î–∞—Ç–∞"]) == today)))

async def assign_user_to_block(block_num, user_id):
    today = get_today()
    records = day_sheet.get_all_records()
    user = await bot.get_chat(user_id)
    name = user.username or user.full_name or str(user_id)
    for i, row in enumerate(records):
        if str(row["–î–∞—Ç–∞"]) == today and str(row["–ë–ª–æ–∫"]) == str(block_num) and not row["Telegram ID"]:
            safe_update_cell(day_sheet, i+2, 8, str(user_id))  # Telegram ID
            safe_update_cell(day_sheet, i+2, 9, name)          # –Ü–º º—è
    user_sessions[user_id] = block_num

def mark_task_done(row):
    safe_update_cell(day_sheet, row, 10, "TRUE")

async def send_reminder(user_id, task, reminder, row, idx=1):
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ', callback_data=f'done_{row}_{idx}')]
        ]
    )
    await bot.send_message(
        user_id,
        f"–ó–∞–≤–¥–∞–Ω–Ω—è: {task}\n–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminder}\n\n–°—Ç–∞—Ç—É—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: <b>–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ–π—à–ª–æ</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    user_sessions[user_id] = row

async def repeat_reminder_if_needed(user_id, row, task, reminder, block):
    value = day_sheet.cell(row, 10).value
    if value != "TRUE":
        await bot.send_message(
            user_id,
            f"‚è∞ –ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ—Å—ñ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ:\n\n"
            f"–ë–ª–æ–∫ {block}\n"
            f"–ó–∞–≤–¥–∞–Ω–Ω—è: {task}\n"
            f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminder}\n\n"
            f"–ù–µ –∑–∞–±—É–¥—å –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ ¬´‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ¬ª!"
        )

async def notify_admin_if_needed(user_id, row, task, reminder, block):
    value = day_sheet.cell(row, 10).value
    if value != "TRUE":
        name = get_full_name_by_id(user_id)
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"‚ùóÔ∏è <b>–ó–∞–≤–¥–∞–Ω–Ω—è –ù–ï –≤–∏–∫–æ–Ω–∞–Ω–æ!</b>\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {name}\n"
                    f"–ë–ª–æ–∫: {block}\n"
                    f"–ó–∞–≤–¥–∞–Ω–Ω—è: {task}\n"
                    f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminder}",
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"[ADMIN_NOTIFY] Failed to send to {admin_id}: {e}")

@dp.callback_query(F.data.startswith('done_'))
async def done_callback(call: types.CallbackQuery):
    parts = call.data.split('_')
    row = int(parts[1])
    idx = int(parts[2])  # —ñ–Ω–¥–µ–∫—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    col = 10 + (idx - 1)
    safe_update_cell(day_sheet, row, col, "TRUE")
    await call.message.edit_text(
        call.message.text.replace("–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ–π—à–ª–æ", "–£—Å–ø—ñ—à–Ω–µ"),
        reply_markup=None,
        parse_mode="HTML"
    )
    await call.answer("–í—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ ‚úÖ")

# --- –ú–µ–Ω—é ---
user_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–†–æ–∑–ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å")],
        [types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–æ—ó—Ö –∑–∞–≤–¥–∞–Ω—å"), types.KeyboardButton(text="–ú–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")],
        [types.KeyboardButton(text="–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"), types.KeyboardButton(text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –±–∞–∑–∞")],
        [types.KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–µ–Ω—å")],
        [types.KeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –¥—ñ—é")]
    ],
    resize_keyboard=True
)

admin_menu_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üìã –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è")],
        [types.KeyboardButton(text="üìä –ó–≤—ñ—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –í–∏—Ö—ñ–¥ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")]
    ],
    resize_keyboard=True
)

def get_full_name_by_id(user_id):
    try:
        for r in staff_sheet.get_all_records():
            if str(r.get("Telegram ID", "")).strip() == str(user_id):
                return r.get(list(r.keys())[0], "")
    except Exception as e:
        print(f"[ERROR][get_full_name_by_id]: {e}")
    return "?"

@dp.message(F.text == "üìä –ó–≤—ñ—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
async def admin_report_choose_date(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    today = datetime.now(UA_TZ).date()
    dates = [(today - timedelta(days=i)).strftime('%Y-%m-%d') for i in range(10)]
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=d)] for d in dates] + [[types.KeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –¥—ñ—é")]],
        resize_keyboard=True
    )
    await state.set_state(ReportFSM.waiting_date)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è –∑–≤—ñ—Ç—É:", reply_markup=kb)

@dp.message(ReportFSM.waiting_date)
async def admin_report_generate(message: types.Message, state: FSMContext):
    date = message.text.strip()
    await state.clear()
    if date == datetime.now(UA_TZ).strftime('%Y-%m-%d'):
        sheet = day_sheet
    else:
        try:
            archive_sheet = date
            sheet = gs.open_by_key(SHEET_KEY).worksheet(archive_sheet)
        except Exception:
            await message.answer(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—Ä—Ö—ñ–≤–Ω–∏–π –ª–∏—Å—Ç –¥–ª—è {date}.")
            return
    rows = sheet.get_all_records()
    if not rows:
        await message.answer("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ —Ü—é –¥–∞—Ç—É.")
        return
    blocks = {}
    for row in rows:
        block = str(row.get("–ë–ª–æ–∫") or "")
        if not block:
            continue
        if block not in blocks:
            blocks[block] = []
        blocks[block].append(row)
    result = f"<b>–ó–≤—ñ—Ç –∑–∞ {date}:</b>\n\n"
    for block, items in sorted(blocks.items(), key=lambda x: int(x[0])):
        responsible_id = None
        for r in items:
            if r.get("Telegram ID"):
                responsible_id = r["Telegram ID"]
                break
        name = get_full_name_by_id(responsible_id) if responsible_id else "‚Äî"
        result += f"<b>–ë–ª–æ–∫ {block}:</b>\n"
        result += f"–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π: <b>{name}</b>\n"
        seen_tasks = set()
        for r in items:
            task = r.get("–ó–∞–≤–¥–∞–Ω–Ω—è") or ""
            reminder = r.get("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è") or ""
            task_key = task.strip().lower()
            if task_key in seen_tasks:
                continue
            seen_tasks.add(task_key)
            times = [tm.strip() for tm in (r.get("–ß–∞—Å") or "").split(",") if tm.strip()]
            status_marks = []
            for idx, tm in enumerate(times):
                col = "–í–∏–∫–æ–Ω–∞–Ω–æ" if idx == 0 else f"–í–∏–∫–æ–Ω–∞–Ω–æ ({idx+1})"
                val = (r.get(col) or "").strip().upper()
                status_marks.append("‚úÖ" if val == "TRUE" else "‚ùå")
            if not times:
                val = (r.get("–í–∏–∫–æ–Ω–∞–Ω–æ") or "").strip().upper()
                status_marks.append("‚úÖ" if val == "TRUE" else "‚ùå")
            result += f"‚Ä¢ <b>{task}</b> | {reminder} {' '.join(status_marks)}\n"
        result += "\n"
    await message.answer(result, parse_mode="HTML", reply_markup=admin_menu_kb)

@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        "–í—ñ—Ç–∞—é! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–†–æ–∑–ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å¬ª —â–æ–± –≤–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–ª–æ–∫—ñ–≤.",
        reply_markup=user_menu
    )

@dp.message(Command("admin"))
async def admin_menu(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await message.answer("üîß <b>–ê–¥–º—ñ–Ω-–º–µ–Ω—é</b>", reply_markup=admin_menu_kb, parse_mode="HTML")

@dp.message(F.text == "‚¨ÖÔ∏è –í–∏—Ö—ñ–¥ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def exit_admin(message: types.Message):
    await message.answer("–ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", reply_markup=user_menu)

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ –º–æ—ó—Ö –∑–∞–≤–¥–∞–Ω—å")
async def my_tasks(message: types.Message):
    user_id = message.from_user.id
    today = get_today()
    records = day_sheet.get_all_records()
    my_tasks = [
        (idx+2, row)
        for idx, row in enumerate(records)
        if str(row.get("–î–∞—Ç–∞")) == today and str(row.get("Telegram ID")) == str(user_id)
    ]
    if not my_tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.", reply_markup=user_menu)
        return
    seen_tasks = set()
    for row_idx, row in my_tasks:
        task = (row.get("–ó–∞–≤–¥–∞–Ω–Ω—è") or "").strip().lower()
        if task in seen_tasks:
            continue
        seen_tasks.add(task)
        desc = row.get("–û–ø–∏—Å") or ""
        done = (row.get("–í–∏–∫–æ–Ω–∞–Ω–æ", "").strip().upper() == "TRUE")
        status = "‚úÖ" if done else "‚ùå –ù–µ –≤–∏–∫–æ–Ω–∞–Ω–æ"
        text = f"<b>–ó–∞–≤–¥–∞–Ω–Ω—è:</b> <b>{row.get('–ó–∞–≤–¥–∞–Ω–Ω—è') or ''}</b>\n"
        if desc:
            text += f"<u>–ó–æ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ:</u>\n{desc}\n"
        text += f"<b>–°—Ç–∞—Ç—É—Å:</b> <b>{status}</b>"
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data=f"task_done_{row_idx}")]
            ]
        )
        await message.answer(text, reply_markup=kb, parse_mode="HTML")

@dp.callback_query(F.data.startswith("task_done_"))
async def mark_task_done_callback(call: types.CallbackQuery):
    row_idx = int(call.data.replace("task_done_", ""))
    safe_update_cell(day_sheet, row_idx, 10, "TRUE")
    await call.message.edit_text(call.message.text.replace("‚ùå", "‚úÖ").replace("–ù–µ –≤–∏–∫–æ–Ω–∞–Ω–æ", "–í–∏–∫–æ–Ω–∞–Ω–æ"), parse_mode="HTML")
    await call.answer("–í—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ ‚úÖ")

@dp.message(F.text == "–ú–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
async def my_reminders(message: types.Message):
    user_id = message.from_user.id
    today = get_today()
    records = day_sheet.get_all_records()
    my_reminders = [
        row for row in records
        if str(row.get("–î–∞—Ç–∞")) == today and str(row.get("Telegram ID")) == str(user_id)
    ]
    if not my_reminders:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.", reply_markup=user_menu)
        return
    def parse_time(row):
        times = (row.get("–ß–∞—Å") or "").split(",")
        times = [t.strip() for t in times if t.strip()]
        if not times:
            return "23:59"
        try:
            return times[0]
        except:
            return "23:59"
    my_reminders_sorted = sorted(my_reminders, key=parse_time)
    text = "<b>–í–∞—à—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:</b>\n"
    for row in my_reminders_sorted:
        reminder = row.get("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è") or ""
        time_ = row.get("–ß–∞—Å") or ""
        status = "‚úÖ" if (row.get("–í–∏–∫–æ–Ω–∞–Ω–æ", "").strip().upper() == "TRUE") else "‚ùå"
        text += f"‚Äî {time_}: {reminder} {status}\n"
    await message.answer(text, parse_mode="HTML", reply_markup=user_menu)

@dp.message(StateFilter('*'), F.text == "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –¥—ñ—é")
async def universal_back(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=user_menu)

# --- Scheduler –∑–∞–ø—É—Å–∫ --- #
def refresh_block_tasks():
    print("[REFRESH] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∑ Google Sheet")
    # schedule_all_block_tasks_for_today()  # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ü–µ–π –≤–∏–∫–ª–∏–∫ ‚Äî —Ä–∞—Å–∫–æ–º–µ–Ω—Ç—É–π

async def main():
    loop = asyncio.get_running_loop()
    scheduler.start()
    # schedule_all_block_tasks_for_today()  # –Ø–∫—â–æ —Ç—Ä–µ–±–∞
    scheduler.add_job(
        refresh_block_tasks,
        'interval',
        hours=1,
        id="refresh-block-tasks",
        replace_existing=True
    )
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
