import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = os.environ.get('TOKEN')

# –ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ –±–ª–æ–∫–∞—Ö
TASKS = {
    6: {
        1: ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        2: ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        3: ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        4: ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        5: ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        6: ["–ö–∞—Å–∞", '–ó–∞–ø–∏—Ç–∏ "–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞"', '–ó–∞–ø–∏—Ç–∏ "–ê–∫—Å–∏"'],
    },
    7: {
        1: ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        2: ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        3: ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        4: ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        5: ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        6: ["–ö–∞—Å–∞", '–ó–∞–ø–∏—Ç–∏ "–ê–∫—Å–∏"'],
        7: ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", '–ó–∞–ø–∏—Ç–∏ "–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞"', "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
    },
    8: {
        1: ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        2: ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        3: ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        4: ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        5: ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        6: ["–ö–∞—Å–∞"],
        7: ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", '–ó–∞–ø–∏—Ç–∏ "–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞"', "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        8: ["–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", '–ó–∞–ø–∏—Ç–∏ "–ê–∫—Å–∏"'],
    },
    9: {
        1: ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        2: ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        3: ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        4: ["OLX", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        5: ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        6: ["–ö–∞—Å–∞"],
        7: ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", '–ó–∞–ø–∏—Ç–∏ "–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞"', "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        8: ["–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", '–ó–∞–ø–∏—Ç–∏ "–ê–∫—Å–∏"'],
        9: ["–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤"],
    },
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("6 –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤", callback_data="workers_6")],
        [InlineKeyboardButton("7 –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤", callback_data="workers_7")],
        [InlineKeyboardButton("8 –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤", callback_data="workers_8")],
        [InlineKeyboardButton("9 –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤", callback_data="workers_9")],
    ]
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –Ω–∞ –∑–º—ñ–Ω—ñ:", reply_markup=InlineKeyboardMarkup(keyboard))

async def choose_workers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [KeyboardButton("6"), KeyboardButton("7")],
        [KeyboardButton("8"), KeyboardButton("9")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    await update.message.reply_text(
        "–°–∫—ñ–ª—å–∫–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –Ω–∞ –∑–º—ñ–Ω—ñ?",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    )

async def select_workers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    workers = int(query.data.split("_")[1])
    context.user_data["workers"] = workers

    keyboard = []
    for block in range(1, workers + 1):
        keyboard.append([InlineKeyboardButton(f"–ë–ª–æ–∫ {block}", callback_data=f"block_{block}")])

    await query.edit_message_text(
        text=f"–í–∏–±—Ä–∞–Ω–æ {workers} –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤. –¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –±–ª–æ–∫:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def select_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    block = int(query.data.split("_")[1])
    context.user_data["block"] = block
    workers = context.user_data.get("workers", 6)

    tasks = TASKS.get(workers, {}).get(block, ["–ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å –¥–ª—è —Ü—å–æ–≥–æ –±–ª–æ–∫—É"])

    await query.edit_message_text(
        text=f"–í–∞—à—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –±–ª–æ–∫—É {block}:\n" + "\n".join(f"üîπ {task}" for task in tasks)
    )

    keyboard = []
    for idx, task in enumerate(tasks, start=1):
        keyboard.append([InlineKeyboardButton(task, callback_data=f"starttask_{idx}")])

    await query.message.reply_text(
        "–ó —è–∫–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∏ –ø–æ—á–Ω–µ—à?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def start_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    task_idx = int(query.data.split("_")[1])
    workers = context.user_data.get("workers", 6)
    block = context.user_data.get("block", 1)

    task = TASKS.get(workers, {}).get(block, ["–ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å"])[task_idx - 1]
    context.user_data["current_task"] = task

    keyboard = [
        [InlineKeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data="task_done")]
    ]

    await query.edit_message_text(
        text=f"–î–æ–±—Ä–µ, –ø–æ—á–∏–Ω–∞–π —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è: ‚úÖ {task}\n\n–ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –Ω–µ –∑–∞–±—É–¥—å –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏ —Ü–µ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def task_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    task = context.user_data.get("current_task", "–ó–∞–≤–¥–∞–Ω–Ω—è")
    await query.edit_message_text(text=f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è '{task}' –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ. –ì–∞—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞!")

    # –¢—É—Ç –ø—ñ–∑–Ω—ñ—à–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å —É Google –¢–∞–±–ª–∏—Ü—é –∞–±–æ –ª–æ–≥.


def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(select_workers, pattern=r"^workers_\d+$"))
    app.add_handler(CallbackQueryHandler(select_block, pattern=r"^block_\d+$"))
    app.add_handler(CallbackQueryHandler(start_task, pattern=r"^starttask_\d+$"))
    app.add_handler(CallbackQueryHandler(task_done, pattern=r"^task_done$"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    app.run_polling()


if __name__ == '__main__':
    main()