import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = os.environ.get("TOKEN")  # –∞–±–æ –≤–ø–∏—à–∏ –ø—Ä—è–º–æ: TOKEN = "123456:ABC..."

user_state = {}

# –ë–ª–æ–∫–∏ –∑–∞–≤–¥–∞–Ω—å
TASKS = {
    6: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""]
    },
    7: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"]
    },
    8: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞"],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "8": ["–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""]
    },
    9: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞"],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "8": ["–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""],
        "9": ["–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤"]
    }
}


# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è 
INSTRUCTION = """–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ª–∏—à–µ –¥–æ –ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è: ..."""

TASK_DESCRIPTIONS = {
    "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É": [
        "1) –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å, —É—Ç–æ—á–Ω–∏—Ç–∏ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∞–π—Ç–∞",
        "2) –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–∞—é—Ç—å —Å—Ç—ñ–∫–µ—Ä –∑ ‚Ññ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        "3) –ó–∞—Ä—è–¥–∏—Ç–∏ –≤–∂–∏–≤–∞–Ω—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∏",
        "4) –í–∂–∏–≤–∞–Ω—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –≤ —Ñ—ñ—Ä–º–æ–≤–∏—Ö –∫–æ—Ä–æ–±–∫–∞—Ö",
        "5) –í—Å–µ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ –Ω–∞ –ø–æ–ª–∏—á—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å",
        "6) –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–∫–∞–∑–∏ –Ω–∞ —Å–∫–ª–∞–¥—ñ"
    ],
    "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ": [
        "1) –ó–≤—ñ—Ä–∏—Ç–∏ —Ç–æ–≤–∞—Ä —Ñ–∞–∫—Ç/–±–∞–∑–∞",
        "2) –ü—Ä–æ—ñ–Ω—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏)",
        "3) –ü–æ–Ω–æ–≤–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–∏ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏)",
        "4) –¢–µ—Ö–Ω—ñ–∫–∞ –ø—ñ–¥–ø–∏—Å–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–º",
        "5) –ó–∞—Ä—è–¥–∏—Ç–∏ –±/—É —Ç–µ–ª–µ—Ñ–æ–Ω–∏",
        "6) –ù–µ–∞–∫—Ç—É–∞–ª—å–Ω—ñ –∑–∞–∫–∞–∑–∏ –∑–∞–∫—Ä–∏—Ç–∏"
    ],
    "OLX": [
        "1) –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
        "2) –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—å (–±—ñ–ª—å—à–µ 45)",
        "3) –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É (7-9 –æ–≥–æ–ª–æ—à–µ–Ω—å)",
        "4) –ó–≤—ñ—Ä–∏—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å —Ü—ñ–Ω"
    ],
    "–°—Ç–∞–Ω–∏ –≤ –±–∞–∑—ñ": [
        "1) –ù–∞ –≤—Å—é –±/—É —Ç–µ—Ö–Ω—ñ–∫—É —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –º–∞—é—Ç—å —Å—Ç–æ—è—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ —Å—Ç–∞–Ω–∏",
        "2) –ö–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –ø—ñ—Å–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è –≤ Trade-in"
    ],
    "–¶—ñ–Ω–Ω–∏–∫–∏": [
        "1) –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Å—é –±/—É —Ç–µ—Ö–Ω—ñ–∫—É –Ω–∞ —è–∫—ñ—Å—Ç—å –Ω–∞–∫–ª–µ—î–Ω–∏—Ö —Ü—ñ–Ω–Ω–∏–∫—ñ–≤",
        "2) –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —è–∫—ñ—Å—Ç—å –ø–æ–∫–ª–µ–π–∫–∏ —Ü—ñ–Ω–Ω–∏–∫—ñ–≤ –Ω–∞ –≤—Å—ñ–π —Ç–µ—Ö–Ω—ñ—Ü—ñ (–≤ —Ç–æ–º—É —á–∏—Å–ª—ñ —ñ —à–æ—É—Ä—É–º)",
        "3) –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ –ø–µ—Ä–µ–æ—Ü—ñ–Ω–∫–∏, —Ç–∞ –ø—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–µ–π–∫—É"
    ],
    "–ó–≤—ñ—Ç –≤–∏—Ç—Ä–∞—Ç–∏": [
        "1) –í—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω—ñ –ø–æ –±–∞–∑—ñ",
        "2) –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è (–ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ)",
        "3) –ó—Ä–æ–±–∏—Ç–∏ —Ç–∞ —Å–∫–∏–Ω—É—Ç–∏ —Ñ–∞–π–ª exel –≤ –≥—Ä—É–ø—É '–ó–≤—ñ—Ç–∏' –∑ —É—Å—ñ–º–∞ —á–µ–∫–∞–º–∏"
    ],
    "–ó–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å": [
        "1) –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —è–∫–∏–º –±—ñ–ª—å—à–µ –¥–≤–æ—Ö –¥–Ω—ñ–≤ (–ì–û, –°–∫–ª–∞–¥–∏, –º—ñ—Å—Ç–∞–º–∏)",
        "2) –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –ø–æ –û–¥–µ—Å—ñ –º—ñ–∂ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ –∑–∞ –º–∏–Ω—É–ª—ñ –¥–Ω—ñ",
        "3) –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ñ—ñ–∑–∏—á–Ω–æ –∞–±–æ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—å —á–æ–º—É –≤–æ–Ω–æ –Ω–µ –¥–æ—ó—Ö–∞–ª–æ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω"
    ]
}


# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state[update.effective_user.id] = {"step": "workers", "done": []}
    buttons = [[KeyboardButton(str(n))] for n in range(6, 8)]
    await update.message.reply_text(
        "–°–∫—ñ–ª—å–∫–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –Ω–∞ –∑–º—ñ–Ω—ñ?",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

# –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    state = user_state.get(user_id, {})
    step = state.get("step", "workers")

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        if step == "block":
            return await start(update, context)
        elif step == "task":
            user_state[user_id]["step"] = "block"
            return await show_blocks(update, context)
        elif step == "confirm":
            user_state[user_id]["step"] = "task"
            return await show_tasks(update, context)

    if step == "workers":
        if text.isdigit() and int(text) in TASKS:
            user_state[user_id]["workers"] = int(text)
            user_state[user_id]["step"] = "block"
            return await show_blocks(update, context)
        else:
            return await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ —á–∏—Å–ª–æ –≤—ñ–¥ 6 –¥–æ 7")

    elif step == "block":
        if text in TASKS[user_state[user_id]["workers"]]:
            user_state[user_id]["block"] = text
            user_state[user_id]["step"] = "task"
            return await show_tasks(update, context)

    elif step == "task":
        user_state[user_id]["current_task"] = text
        user_state[user_id]["step"] = "confirm"
        await update.message.reply_text(f"üõ† –û–±—Ä–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {text}")
        if "–ß–µ—Ä–≥" in text:
            await update.message.reply_text(INSTRUCTION)
        buttons = [[KeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ")], [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
        return await update.message.reply_text(
            "–ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω–∏ ¬´‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ¬ª",
            reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        )

    elif step == "confirm":
        if text == "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ":
            done = user_state[user_id].get("done", [])
            done.append(user_state[user_id]["current_task"])
            user_state[user_id]["done"] = done
            user_state[user_id]["step"] = "task"
            await update.message.reply_text("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ!")
            return await show_tasks(update, context)

# –ü–æ–∫–∞–∑ –±–ª–æ–∫—É
async def show_blocks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    workers = user_state[user_id]["workers"]
    blocks = TASKS[workers].keys()
    buttons = [[KeyboardButton(b)] for b in blocks]
    buttons.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –±–ª–æ–∫ –∑–∞–≤–¥–∞–Ω—å:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

# –ü–æ–∫–∞–∑ –∑–∞–≤–¥–∞–Ω—å
async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    workers = user_state[user_id]["workers"]
    block = user_state[user_id]["block"]
    done = user_state[user_id].get("done", [])
    all_tasks = TASKS[workers][block]
    buttons = []
    for task in all_tasks:
        if task in done:
            buttons.append([KeyboardButton(f"‚úÖ {task}")])
        else:
            buttons.append([KeyboardButton(task)])
    buttons.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å, –∑ —è–∫–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∏:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

# –ó–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()