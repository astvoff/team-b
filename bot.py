import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = os.environ.get("TOKEN")  # –∞–±–æ –≤–ø–∏—à–∏ –ø—Ä—è–º–æ: TOKEN = "123456:ABC..."

user_state = {}

# –ë–ª–æ–∫–∏ –∑–∞–≤–¥–∞–Ω—å
TASKS = {
    6: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""]
    },
    7: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"]
    }
}

# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ª–∏—à–µ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è "–ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è"
INSTRUCTION = """üßæ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:
–ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è:
‚Ä¢ –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–º—ñ–Ω—É –¢–û–í
‚Ä¢ –ó–≤–µ—Å—Ç–∏ –∫–∞—Å—É –Ω–∞ —Ä–∞–Ω–æ–∫
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ñ Binotel
‚Ä¢ –†–∞–Ω–∫–æ–≤–µ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è:
  1. –ü—Ä–æ—Ç–µ—Ä—Ç–∏ —Å–∫–ª–æ –≤—ñ—Ç—Ä–∏–Ω
  2. –í–æ–ª–æ–≥–µ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –ø–æ–≤–µ—Ä—Ö–æ–Ω—å
  3. –ü—Ä–æ—Ç–µ—Ä—Ç–∏ —á–æ—Ö–ª–∏
  4. –ü—Ä–∏–±—Ä–∞—Ç–∏ –¥–∏—Ç—è—á—É –∑–æ–Ω—É
  5. –ü–æ–º–∏—Ç–∏ –ø—ñ–¥–ª–æ–≥—É
–ü—ñ–¥—Å–æ–±–∫–∞:
  1. –ü–æ—Ä—è–¥–æ–∫ –Ω–∞ —Å—Ç–µ–ª–∞–∂–∞—Ö
  2. –ü–æ—Ä—è–¥–æ–∫ –Ω–∞ —Å—Ç–æ–ª—ñ
  3. –ü–æ—Ä—è–¥–æ–∫ —É –∫–∞—Å–æ–≤—ñ–π –∑–æ–Ω—ñ
  4. –í—ñ–¥–Ω–µ—Å—Ç–∏ —Ç–µ—Ö–Ω—ñ–∫—É –Ω–∞ —Å–∫–ª–∞–¥
"""

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state[update.effective_user.id] = {"step": "workers", "done": []}
    buttons = [[KeyboardButton(str(n))] for n in range(6, 8)]
    await update.message.reply_text(
        "–°–∫—ñ–ª—å–∫–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –Ω–∞ –∑–º—ñ–Ω—ñ?",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

# –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    state = user_state.get(user_id, {})
    step = state.get("step", "workers")

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        if step == "block":
            return await start(update, context)
        elif step == "task":
            user_state[user_id]["step"] = "block"
            return await show_blocks(update, context)
        elif step == "confirm":
            user_state[user_id]["step"] = "task"
            return await show_tasks(update, context)

    if step == "workers":
        if text.isdigit() and int(text) in TASKS:
            user_state[user_id]["workers"] = int(text)
            user_state[user_id]["step"] = "block"
            return await show_blocks(update, context)
        else:
            return await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ —á–∏—Å–ª–æ –≤—ñ–¥ 6 –¥–æ 7")

    elif step == "block":
        if text in TASKS[user_state[user_id]["workers"]]:
            user_state[user_id]["block"] = text
            user_state[user_id]["step"] = "task"
            return await show_tasks(update, context)

    elif step == "task":
        user_state[user_id]["current_task"] = text
        user_state[user_id]["step"] = "confirm"
        await update.message.reply_text(f"üõ† –û–±—Ä–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {text}")
        if "–ß–µ—Ä–≥" in text:
            await update.message.reply_text(INSTRUCTION)
        buttons = [[KeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ")], [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
        return await update.message.reply_text(
            "–ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω–∏ ¬´‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ¬ª",
            reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        )

    elif step == "confirm":
        if text == "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ":
            done = user_state[user_id].get("done", [])
            done.append(user_state[user_id]["current_task"])
            user_state[user_id]["done"] = done
            user_state[user_id]["step"] = "task"
            await update.message.reply_text("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ!")
            return await show_tasks(update, context)

# –ü–æ–∫–∞–∑ –±–ª–æ–∫—É
async def show_blocks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    workers = user_state[user_id]["workers"]
    blocks = TASKS[workers].keys()
    buttons = [[KeyboardButton(b)] for b in blocks]
    buttons.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –±–ª–æ–∫ –∑–∞–≤–¥–∞–Ω—å:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

# –ü–æ–∫–∞–∑ –∑–∞–≤–¥–∞–Ω—å
async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    workers = user_state[user_id]["workers"]
    block = user_state[user_id]["block"]
    done = user_state[user_id].get("done", [])
    all_tasks = TASKS[workers][block]
    buttons = []
    for task in all_tasks:
        if task in done:
            buttons.append([KeyboardButton(f"‚úÖ {task}")])
        else:
            buttons.append([KeyboardButton(task)])
    buttons.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å, –∑ —è–∫–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∏:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

# –ó–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()