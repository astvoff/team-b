# telegram_bot_v2.py

import os
import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = os.environ.get("TOKEN")

# –î–µ—Ä–∂–∞–≤–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
user_state = {}
used_blocks = {}  # dict –Ω–∞ –¥–µ–Ω—å, —â–æ –∑–±–µ—Ä—ñ–≥–∞—î –∑–∞–π–Ω—è—Ç—ñ –±–ª–æ–∫–∏
admin_id = 123456789  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID

# –ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ –±–ª–æ–∫–∞—Ö –¥–ª—è 6‚Äì9 –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤
TASKS = {
    6: {"1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"], ...},  # —Å–∫–æ—Ä–æ—á–µ–Ω–æ
    7: {"1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"], ...},
    8: {...},  # –¥–æ–¥–∞–π –∑–∞–≤–¥–∞–Ω–Ω—è —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ
    9: {...}
}

INSTRUCTION = """–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ª–∏—à–µ –¥–æ –ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è: ..."""

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = {"step": "begin"}
    kb = [[KeyboardButton("‚ñ∂Ô∏è –†–æ–∑–ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å")]]
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç!", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

# –•–µ–Ω–¥–ª–µ—Ä
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    state = user_state.get(user_id, {})
    step = state.get("step", "begin")

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        if step == "confirm_block":
            user_state[user_id]["step"] = "block"
            return await show_blocks(update, context)
        if step == "block":
            user_state[user_id]["step"] = "workers"
            return await ask_workers(update, context)
        if step == "task":
            user_state[user_id]["step"] = "confirm_block"
            return await confirm_block(update, context)

    if text == "‚ñ∂Ô∏è –†–æ–∑–ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å":
        user_state[user_id] = {"step": "workers", "done": []}
        return await ask_workers(update, context)

    if step == "workers":
        if text.isdigit() and int(text) in TASKS:
            user_state[user_id]["workers"] = int(text)
            user_state[user_id]["step"] = "block"
            return await show_blocks(update, context)

    if step == "block":
        block = text.strip()
        workers = user_state[user_id]["workers"]
        today = datetime.date.today().isoformat()
        used_today = used_blocks.get(today, set())
        if block in used_today:
            return await update.message.reply_text("‚ùó–¶–µ–π –±–ª–æ–∫ –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π —ñ–Ω—à–∏–º –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–æ–º.")
        user_state[user_id]["block"] = block
        user_state[user_id]["step"] = "confirm_block"
        return await confirm_block(update, context)

    if step == "confirm_block":
        if text == f"‚úÖ –¢–∞–∫, –±–ª–æ–∫ {user_state[user_id]['block']}":
            block = user_state[user_id]['block']
            today = datetime.date.today().isoformat()
            used_blocks.setdefault(today, set()).add(block)
            user_state[user_id]["step"] = "task"
            return await show_tasks(update, context)
        else:
            return await show_blocks(update, context)

    if step == "task":
        current_task = text.replace("‚úÖ ", "")
        if current_task.startswith("‚úÖ"):
            return
        user_state[user_id]["current_task"] = current_task
        user_state[user_id]["step"] = "confirm_task"
        await update.message.reply_text(f"üõ† –ó–∞–≤–¥–∞–Ω–Ω—è: {current_task}")
        if "–ß–µ—Ä–≥" in current_task:
            await update.message.reply_text(INSTRUCTION)
        kb = [[KeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ")], [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
        return await update.message.reply_text("–ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ ¬´‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ¬ª",
                                              reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

    if step == "confirm_task":
        if text == "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ":
            task = user_state[user_id].get("current_task")
            done = user_state[user_id].get("done", [])
            if task not in done:
                done.append(task)
                user_state[user_id]["done"] = done
            user_state[user_id]["step"] = "task"
            await update.message.reply_text("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ!")
            return await show_tasks(update, context)

    if text == "‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–µ–Ω—å":
        return await finish_day(update, context)

# –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–µ–Ω—å
async def finish_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = user_state.get(user_id, {})
    username = update.effective_user.username
    block = data.get("block")
    done = data.get("done", [])
    now = datetime.datetime.now().strftime("%H:%M:%S")
    # TODO: –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ Google Sheets —Ç—É—Ç
    user_state[user_id] = {}
    return await update.message.reply_text(f"–î—è–∫—É—é {username}, —Ç–≤—ñ–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å—å–æ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")

async def ask_workers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[KeyboardButton(str(n))] for n in range(6, 10)]
    await update.message.reply_text("–°–∫—ñ–ª—å–∫–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –Ω–∞ –∑–º—ñ–Ω—ñ?", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

async def show_blocks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    workers = user_state[update.effective_user.id]["workers"]
    kb = [[KeyboardButton(str(n))] for n in TASKS[workers].keys()]
    kb.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –±–ª–æ–∫:", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

async def confirm_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    block = user_state[update.effective_user.id]["block"]
    kb = [[KeyboardButton(f"‚úÖ –¢–∞–∫, –±–ª–æ–∫ {block}"), KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
    await update.message.reply_text(f"–í–∏ —Ç–æ—á–Ω–æ –æ–±—Ä–∞–ª–∏ –±–ª–æ–∫ {block}?",
                                    reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = user_state[update.effective_user.id]
    workers = state["workers"]
    block = state["block"]
    done = state.get("done", [])
    all_tasks = TASKS[workers][block]
    kb = [[KeyboardButton(("‚úÖ " if t in done else "") + t)] for t in all_tasks]
    kb.append([KeyboardButton("‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–µ–Ω—å")])
    kb.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è:", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.run_polling()
