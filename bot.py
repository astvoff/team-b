import os
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

TOKEN = os.environ.get("TOKEN")  # –ê–±–æ –∑–∞–º—ñ–Ω–∏ –Ω–∞ –ø—Ä—è–º–∏–π —Ç–æ–∫–µ–Ω —è–∫ "123456:ABC..."
user_state = {}

TASKS = {
    6: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""]
    },
    7: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"]
    },
    8: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞"],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "8": ["–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""]
    },
    9: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OLX", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞"],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "8": ["–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""],
        "9": ["–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤"]
    }
}

INSTRUCTION = """üîπ *–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:*
‚Äî –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–º—ñ–Ω—É –¢–û–í
‚Äî –ó–≤–µ—Å—Ç–∏ –∫–∞—Å—É –Ω–∞ —Ä–∞–Ω–æ–∫
‚Äî –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ñ Binotel
‚Äî –†–∞–Ω–∫–æ–≤–µ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è:
  1) –ü—Ä–æ—Ç–µ—Ä—Ç–∏ —Å–∫–ª–æ –≤—ñ—Ç—Ä–∏–Ω
  2) –í–æ–ª–æ–≥–µ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –ø–æ–≤–µ—Ä—Ö–æ–Ω—å
  3) –ü—Ä–æ—Ç–µ—Ä—Ç–∏ —á–æ—Ö–ª–∏
  4) –ü—Ä–∏–±—Ä–∞—Ç–∏ –¥–∏—Ç—è—á—É –∑–æ–Ω—É
  5) –ü–æ–º–∏—Ç–∏ –ø—ñ–¥–ª–æ–≥—É
‚Äî –ü—ñ–¥—Å–æ–±–∫–∞:
  1) –ü–æ—Ä—è–¥–æ–∫ –Ω–∞ —Å—Ç–µ–ª–∞–∂–∞—Ö
  2) –ü–æ—Ä—è–¥–æ–∫ –Ω–∞ —Å—Ç–æ–ª—ñ
  3) –ü–æ—Ä—è–¥–æ–∫ —É –∫–∞—Å–æ–≤—ñ–π –∑–æ–Ω—ñ
  4) –í—ñ–¥–Ω–µ—Å—Ç–∏ —Ç–µ—Ö–Ω—ñ–∫—É –Ω–∞ —Å–∫–ª–∞–¥
"""

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state[update.effective_user.id] = {}
    buttons = [[KeyboardButton(str(n))] for n in range(6, 10)]
    await update.message.reply_text(
        "–°–∫—ñ–ª—å–∫–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –Ω–∞ –∑–º—ñ–Ω—ñ?",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

# –í–∏–±—ñ—Ä –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
async def handle_workers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await start(update, context)
    if text.isdigit() and int(text) in TASKS:
        user_state[update.effective_user.id]["workers"] = int(text)
        blocks = TASKS[int(text)]
        buttons = [[KeyboardButton(k)] for k in blocks.keys()]
        buttons.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –±–ª–æ–∫ –∑–∞–≤–¥–∞–Ω—å:",
            reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        )
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 6 –¥–æ 9.")

# –í–∏–±—ñ—Ä –±–ª–æ–∫—É
async def handle_blocks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await handle_workers(update, context)
    workers = user_state[update.effective_user.id]["workers"]
    blocks = TASKS.get(workers, {})
    if text in blocks:
        user_state[update.effective_user.id]["block"] = text
        tasks = blocks[text]
        buttons = [[KeyboardButton(t)] for t in tasks]
        buttons.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å, –∑ —è–∫–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∏:",
            reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        )
    else:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –±–ª–æ–∫.")

# –ó–∞–≤–¥–∞–Ω–Ω—è
async def handle_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await handle_blocks(update, context)
    task = update.message.text
    await update.message.reply_text(f"üõ† –û–±—Ä–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: *{task}*", parse_mode="Markdown")
    await update.message.reply_text(INSTRUCTION, parse_mode="Markdown")
    buttons = [[KeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ")], [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
    await update.message.reply_text(
        "–ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω–∏ ¬´‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ¬ª",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def handle_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await handle_blocks(update, context)
    if update.message.text == "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ":
        await update.message.reply_text("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ. –ì–∞—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞! üí™")
        return await start(update, context)

# –ó–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^[6-9]$"), handle_workers))
    app.add_handler(MessageHandler(filters.Regex("^[1-9]$"), handle_blocks))
    app.add_handler(MessageHandler(filters.Regex("^(?!‚¨ÖÔ∏è –ù–∞–∑–∞–¥$).*"), handle_tasks))
    app.add_handler(MessageHandler(filters.TEXT, handle_done))
    app.run_polling()

if __name__ == "__main__":
    main()