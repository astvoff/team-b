import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv
from datetime import datetime, timedelta

# Load .env
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

# Logging
logging.basicConfig(level=logging.INFO)

# Google Sheets setup
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
gs = gspread.authorize(creds)
SHEET_NAME = 'Tasks'
sheet = gs.open(SHEET_NAME).sheet1

# Init bot
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# Store user session data
user_sessions = {}

# --- Helper Functions --- #

def get_today():
    return datetime.now().strftime('%Y-%m-%d')

def get_blocks_count():
    # –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –±–ª–æ–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
    records = sheet.get_all_records()
    today = get_today()
    blocks = {str(rec["–ë–ª–æ–∫"]) for rec in records if str(rec["–î–∞—Ç–∞"]) == today}
    return sorted(list(blocks))

def get_block_tasks(block, user_id):
    records = sheet.get_all_records()
    today = get_today()
    tasks = []
    for rec in records:
        if str(rec["–î–∞—Ç–∞"]) == today and str(rec["–ë–ª–æ–∫"]) == str(block):
            tasks.append({
                "row": records.index(rec)+2,  # +2 –±–æ get_all_records –Ω–µ –≤—Ä–∞—Ö–æ–≤—É—î –∑–∞–≥–æ–ª–æ–≤–∫–∏
                "time": rec["–ß–∞—Å"],
                "task": rec["–ó–∞–≤–¥–∞–Ω–Ω—è"],
                "desc": rec["–û–ø–∏—Å"],
                "done": rec["–í–∏–∫–æ–Ω–∞–Ω–æ"],
            })
    return tasks

def assign_user_to_block(block, user_id):
    # –ó–∞–ø–∏—Å—É—î Telegram ID —É –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –±–ª–æ–∫—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
    records = sheet.get_all_records()
    today = get_today()
    for i, rec in enumerate(records):
        if str(rec["–î–∞—Ç–∞"]) == today and str(rec["–ë–ª–æ–∫"]) == str(block):
            sheet.update_cell(i+2, 3, str(user_id)) # –∫–æ–ª–æ–Ω–∫–∞ 3 - Telegram ID

def mark_task_done(row):
    # –ü–æ–∑–Ω–∞—á–∞—î –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ (TRUE) –ø–æ row
    sheet.update_cell(row, 7, "TRUE") # –∫–æ–ª–æ–Ω–∫–∞ 7 - –í–∏–∫–æ–Ω–∞–Ω–æ

def get_block_for_user(user_id):
    records = sheet.get_all_records()
    today = get_today()
    for rec in records:
        if str(rec["–î–∞—Ç–∞"]) == today and str(rec["Telegram ID"]) == str(user_id):
            return rec["–ë–ª–æ–∫"]
    return None

# --- Bot Handlers --- #

@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–†–æ–∑–ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å'))
    await message.answer("–í—ñ—Ç–∞—é! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–†–æ–∑–ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å¬ª —â–æ–± –≤–∏–±—Ä–∞—Ç–∏ —Å–≤—ñ–π –±–ª–æ–∫.", reply_markup=kb)

@dp.message(lambda msg: msg.text == '–†–æ–∑–ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å')
async def choose_blocks(message: types.Message):
    blocks = get_blocks_count()
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for b in blocks:
        kb.add(KeyboardButton(f"{b} –±–ª–æ–∫"))
    await message.answer(f"–°–∫—ñ–ª—å–∫–∏ –±–ª–æ–∫—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ –ø—Ä–∞—Ü—é—î? –û–±–µ—Ä–∏ —Å–≤—ñ–π –±–ª–æ–∫:", reply_markup=kb)

@dp.message(lambda msg: msg.text and msg.text.endswith('–±–ª–æ–∫'))
async def select_block(message: types.Message):
    block_num = message.text.split()[0]
    user_id = message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –±–ª–æ–∫ –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π
    records = sheet.get_all_records()
    today = get_today()
    for rec in records:
        if str(rec["–î–∞—Ç–∞"]) == today and str(rec["–ë–ª–æ–∫"]) == block_num and rec["Telegram ID"]:
            if str(rec["Telegram ID"]) == str(user_id):
                await message.answer("–¶–µ–π –±–ª–æ–∫ –≤–∂–µ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–∏–π –∑–∞ –≤–∞–º–∏.")
                return
            else:
                await message.answer("–¶–µ–π –±–ª–æ–∫ –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π —ñ–Ω—à–∏–º –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–æ–º.")
                return

    assign_user_to_block(block_num, user_id)
    user_sessions[user_id] = block_num
    await message.answer(f"–°—É–ø–µ—Ä! –¢–≤–æ—ó –∑–∞–¥–∞—á—ñ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤ –±–ª–æ—Ü—ñ {block_num} üëá", reply_markup=ReplyKeyboardRemove())

    tasks = get_block_tasks(block_num, user_id)
    tasks_text = "\n".join([f"‚Äî {t['time']}: {t['task']} ({t['desc']})" for t in tasks])
    await message.answer(f"–Ø –±—É–¥—É –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –ø—Ä–æ –∫–æ–∂–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è —É –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —á–∞—Å. –û—Å—å —Ç–≤—ñ–π —Å–ø–∏—Å–æ–∫:\n\n{tasks_text}")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ —é–∑–µ—Ä–∞
    schedule_reminders_for_user(user_id, block_num, tasks)

def schedule_reminders_for_user(user_id, block_num, tasks):
    for task in tasks:
        remind_time = datetime.strptime(f"{get_today()} {task['time']}", '%Y-%m-%d %H:%M')
        if remind_time < datetime.now():
            continue  # –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏, —è–∫—â–æ —á–∞—Å –≤–∂–µ –º–∏–Ω—É–≤
        scheduler.add_job(
            send_reminder,
            'date',
            run_date=remind_time,
            args=[user_id, task["task"], task["desc"], task["row"]],
            id=f"{user_id}-{task['row']}",
            replace_existing=True
        )

async def send_reminder(user_id, task, desc, row):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ'))
    await bot.send_message(
        user_id,
        f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {task}\n\n{desc}\n\n–ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω–∏ ¬´‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ¬ª.",
        reply_markup=kb
    )
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ row –¥–ª—è –≤—ñ–¥–º—ñ—Ç–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    user_sessions[user_id] = row

@dp.message(lambda msg: msg.text == '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ')
async def mark_done(message: types.Message):
    user_id = message.from_user.id
    row = user_sessions.get(user_id)
    if not row:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    mark_task_done(row)
    await message.answer("–í—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ ‚úÖ", reply_markup=ReplyKeyboardRemove())
    user_sessions[user_id] = None

# --- Main --- #
async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())