import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv
from datetime import datetime, timedelta, timezone

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ===
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
SHEET_KEY = os.getenv('SHEET_KEY')
UA_TZ = timezone(timedelta(hours=3))  # –ö–∏—ó–≤

logging.basicConfig(level=logging.INFO)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
gs = gspread.authorize(creds)

TEMPLATE_SHEET = '–®–∞–±–ª–æ–Ω–∏ –±–ª–æ–∫—ñ–≤'
DAY_SHEET = '–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å'
template_sheet = gs.open_by_key(SHEET_KEY).worksheet(TEMPLATE_SHEET)
day_sheet = gs.open_by_key(SHEET_KEY).worksheet(DAY_SHEET)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()
user_sessions = {}  # user_id: block_num

# –î–æ–¥–∞—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —Ñ–∞–π–ª—É:
ADMIN_IDS = [123456789]  # <-- –í–∫–∞–∂–∏ —Å–≤—ñ–π Telegram ID, –º–æ–∂–Ω–∞ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# --- –ê–¥–º—ñ–Ω-–º–µ–Ω—é / –∫–æ–º–∞–Ω–¥–∞ ---
@dp.message(lambda msg: msg.text and (msg.text.strip().lower() == '/admin' or msg.text == '–ê–¥–º—ñ–Ω-–º–µ–Ω—é'))
async def admin_menu(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å", callback_data="admin_tasks_today")],
        [InlineKeyboardButton(text="üëÅ –ö–æ–Ω—Ç—Ä–æ–ª—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è", callback_data="admin_control_done")],
        [InlineKeyboardButton(text="üîÑ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –±–ª–æ–∫", callback_data="admin_unblock")],
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —É —à–∞–±–ª–æ–Ω", callback_data="admin_add_template")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è", callback_data="admin_edit_task")],
        [InlineKeyboardButton(text="üõ† –Ü–Ω—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_other_settings")],
    ])
    await message.answer("üîß <b>–ê–¥–º—ñ–Ω-–º–µ–Ω—é</b>", reply_markup=kb, parse_mode="HTML")

# --- –ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–≤–¥–∞–Ω—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ---
@dp.callback_query(lambda c: c.data == "admin_tasks_today")
async def admin_tasks_today(call: types.CallbackQuery):
    records = day_sheet.get_all_records()
    today = get_today()
    text = "<b>–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:</b>\n"
    for row in records:
        if str(row["–î–∞—Ç–∞"]) == today:
            status = "‚úÖ" if row.get("–í–∏–∫–æ–Ω–∞–Ω–æ") == "TRUE" else "‚ùå"
            who = f'({row["Telegram ID"]})' if row["Telegram ID"] else ""
            text += f'‚Äî <b>–ë–ª–æ–∫ {row["–ë–ª–æ–∫"]}:</b> {row["–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"]} {who} {status}\n'
    await call.message.answer(text or "–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å.", parse_mode="HTML")
    await call.answer()

# --- –ö–æ–Ω—Ç—Ä–æ–ª—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ---
@dp.callback_query(lambda c: c.data == "admin_control_done")
async def admin_control_done(call: types.CallbackQuery):
    records = day_sheet.get_all_records()
    today = get_today()
    done, undone = [], []
    for row in records:
        if str(row["–î–∞—Ç–∞"]) == today:
            status = "‚úÖ" if row.get("–í–∏–∫–æ–Ω–∞–Ω–æ") == "TRUE" else "‚ùå"
            who = f'({row["Telegram ID"]})' if row["Telegram ID"] else ""
            line = f'–ë–ª–æ–∫ {row["–ë–ª–æ–∫"]}: {row["–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"]} {who} {status}'
            (done if status == "‚úÖ" else undone).append(line)
    text = "<b>–í–∏–∫–æ–Ω–∞–Ω—ñ:</b>\n" + ("\n".join(done) if done else "–ù–µ–º–∞—î") + "\n\n"
    text += "<b>–ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ:</b>\n" + ("\n".join(undone) if undone else "–ù–µ–º–∞—î")
    await call.message.answer(text, parse_mode="HTML")
    await call.answer()

# --- –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –±–ª–æ–∫ (–≤–∏–¥–∞–ª–∏—Ç–∏ Telegram ID –∑ —É—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å –±–ª–æ–∫—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ) ---
@dp.callback_query(lambda c: c.data == "admin_unblock")
async def admin_unblock(call: types.CallbackQuery):
    blocks = get_blocks_for_today()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=f"–ë–ª–æ–∫ {b}", callback_data=f"unblock_{b}")] for b in blocks]
    )
    await call.message.answer("–û–±–µ—Ä—ñ—Ç—å –±–ª–æ–∫ –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è:", reply_markup=kb)
    await call.answer()

@dp.callback_query(lambda c: c.data.startswith("unblock_"))
async def do_unblock(call: types.CallbackQuery):
    block_num = call.data.replace("unblock_", "")
    today = get_today()
    records = day_sheet.get_all_records()
    for i, row in enumerate(records):
        if str(row["–î–∞—Ç–∞"]) == today and str(row["–ë–ª–æ–∫"]) == str(block_num):
            day_sheet.update_cell(i+2, 8, "")  # Telegram ID
    await call.message.answer(f"–ë–ª–æ–∫ {block_num} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
    await call.answer()

# --- –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —É —à–∞–±–ª–æ–Ω ---
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

class AddTemplateState(StatesGroup):
    wait_blocks = State()
    wait_block_num = State()
    wait_task = State()
    wait_reminder = State()
    wait_time = State()

@dp.callback_query(lambda c: c.data == "admin_add_template")
async def admin_add_template_start(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–ª–æ–∫—ñ–≤ (6/7/8/9):")
    await state.set_state(AddTemplateState.wait_blocks)
    await call.answer()

@dp.message(AddTemplateState.wait_blocks)
async def admin_add_template_blocknum(message: types.Message, state: FSMContext):
    blocks = message.text.strip()
    if blocks not in ["6", "7", "8", "9"]:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å 6, 7, 8 –∞–±–æ 9.")
        return
    await state.update_data(blocks=blocks)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –±–ª–æ–∫—É (1, 2, ...):")
    await state.set_state(AddTemplateState.wait_block_num)

@dp.message(AddTemplateState.wait_block_num)
async def admin_add_template_task(message: types.Message, state: FSMContext):
    block_num = message.text.strip()
    await state.update_data(block_num=block_num)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—è:")
    await state.set_state(AddTemplateState.wait_task)

@dp.message(AddTemplateState.wait_task)
async def admin_add_template_reminder(message: types.Message, state: FSMContext):
    task = message.text.strip()
    await state.update_data(task=task)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:")
    await state.set_state(AddTemplateState.wait_reminder)

@dp.message(AddTemplateState.wait_reminder)
async def admin_add_template_time(message: types.Message, state: FSMContext):
    reminder = message.text.strip()
    await state.update_data(reminder=reminder)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 10:00):")
    await state.set_state(AddTemplateState.wait_time)

@dp.message(AddTemplateState.wait_time)
async def admin_add_template_finish(message: types.Message, state: FSMContext):
    time_str = message.text.strip()
    data = await state.get_data()
    # –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ —É —à–∞–±–ª–æ–Ω!
    template_sheet.append_row([
        data["blocks"], data["block_num"], data["task"], data["reminder"], time_str, ""
    ])
    await message.answer("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ —É —à–∞–±–ª–æ–Ω!")
    await state.clear()

# --- –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è (–ø—Ä–æ—Å—Ç–∏–π –ø—Ä–∏–∫–ª–∞–¥: —Ç—ñ–ª—å–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è/—á–∞—Å) ---
class EditTaskState(StatesGroup):
    wait_block = State()
    wait_reminder = State()
    wait_time = State()
    wait_row_idx = State()

@dp.callback_query(lambda c: c.data == "admin_edit_task")
async def admin_edit_task_start(call: types.CallbackQuery, state: FSMContext):
    blocks = get_blocks_for_today()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=f"–ë–ª–æ–∫ {b}", callback_data=f"editblock_{b}")] for b in blocks]
    )
    await call.message.answer("–û–±–µ—Ä—ñ—Ç—å –±–ª–æ–∫ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=kb)
    await call.answer()

@dp.callback_query(lambda c: c.data.startswith("editblock_"))
async def edit_task_choose_reminder(call: types.CallbackQuery, state: FSMContext):
    block_num = call.data.replace("editblock_", "")
    today = get_today()
    records = day_sheet.get_all_records()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{row['–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è']} ({row['–ß–∞—Å']})", callback_data=f"editrow_{i+2}")]
            for i, row in enumerate(records)
            if str(row["–î–∞—Ç–∞"]) == today and str(row["–ë–ª–æ–∫"]) == block_num
        ]
    )
    await call.message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=kb)
    await call.answer()

@dp.callback_query(lambda c: c.data.startswith("editrow_"))
async def edit_task_input_reminder(call: types.CallbackQuery, state: FSMContext):
    row_idx = int(call.data.replace("editrow_", ""))
    await state.update_data(row_idx=row_idx)
    await call.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:")
    await state.set_state(EditTaskState.wait_reminder)
    await call.answer()

@dp.message(EditTaskState.wait_reminder)
async def edit_task_input_time(message: types.Message, state: FSMContext):
    reminder = message.text.strip()
    await state.update_data(reminder=reminder)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —á–∞—Å (HH:MM):")
    await state.set_state(EditTaskState.wait_time)

@dp.message(EditTaskState.wait_time)
async def edit_task_save(message: types.Message, state: FSMContext):
    time_str = message.text.strip()
    data = await state.get_data()
    day_sheet.update_cell(data["row_idx"], 5, data["reminder"])  # "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"
    day_sheet.update_cell(data["row_idx"], 6, time_str)  # "–ß–∞—Å"
    await message.answer("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Ç–∞ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()

# --- –Ü–Ω—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
@dp.callback_query(lambda c: c.data == "admin_other_settings")
async def admin_other_settings(call: types.CallbackQuery):
    await call.message.answer("üîß –£ –º–∞–π–±—É—Ç–Ω—å–æ–º—É —Ç—É—Ç –±—É–¥—É—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
    await call.answer()

def now_ua():
    return datetime.now(timezone.utc).astimezone(UA_TZ)

def get_today():
    return now_ua().strftime('%Y-%m-%d')

# === –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ —É "–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å" ===
def copy_template_blocks_to_today(blocks_count):
    records = template_sheet.get_all_records()
    today = get_today()
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ: —è–∫—â–æ –≤–∂–µ —î —Ä—è–¥–∫–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —ñ —Ü—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–ª–æ–∫—ñ–≤ ‚Äî –Ω–µ –∫–æ–ø—ñ—é—î–º–æ –≤–¥—Ä—É–≥–µ
    existing = day_sheet.get_all_records()
    for row in existing:
        if str(row["–î–∞—Ç–∞"]) == today and str(row["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–ª–æ–∫—ñ–≤"]) == str(blocks_count):
            return  # –£–∂–µ —î, –Ω–µ –∫–æ–ø—ñ—é—î–º–æ
    # –ö–æ–ø—ñ—é—î–º–æ
    new_rows = []
    for row in records:
        if str(row["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–ª–æ–∫—ñ–≤"]) == str(blocks_count):
            new_rows.append([
                today,  # –î–∞—Ç–∞
                row["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–ª–æ–∫—ñ–≤"],
                row["–ë–ª–æ–∫"],
                row["–ó–∞–≤–¥–∞–Ω–Ω—è"],
                row["–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"],
                row["–ß–∞—Å"],
                row.get("–û–ø–∏—Å", ""),  # –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
                "",  # Telegram ID
                "",  # –í–∏–∫–æ–Ω–∞–Ω–æ
            ])
    if new_rows:
        day_sheet.append_rows(new_rows, value_input_option='USER_ENTERED')

# === –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ===
def get_blocks_for_today():
    today = get_today()
    records = day_sheet.get_all_records()
    return sorted(list(set(str(row["–ë–ª–æ–∫"]) for row in records if str(row["–î–∞—Ç–∞"]) == today)))

# === –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –±–ª–æ–∫—É (–¥–ª—è —Ü—å–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ) ===
def get_tasks_for_block(block_num):
    today = get_today()
    records = day_sheet.get_all_records()
    return [
        {
            "row": idx + 2,  # –¥–ª—è update_cell (1-based)
            "task": row["–ó–∞–≤–¥–∞–Ω–Ω—è"],
            "reminder": row["–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"],
            "time": row["–ß–∞—Å"],
            "done": row["–í–∏–∫–æ–Ω–∞–Ω–æ"],
        }
        for idx, row in enumerate(records)
        if str(row["–î–∞—Ç–∞"]) == today and str(row["–ë–ª–æ–∫"]) == str(block_num)
    ]

# === –ü—Ä–∏–≤'—è–∑–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–ª–æ–∫—É ===
def assign_user_to_block(block_num, user_id):
    today = get_today()
    records = day_sheet.get_all_records()
    for i, row in enumerate(records):
        if str(row["–î–∞—Ç–∞"]) == today and str(row["–ë–ª–æ–∫"]) == str(block_num) and not row["Telegram ID"]:
            day_sheet.update_cell(i+2, 8, str(user_id))  # 8 ‚Äî Telegram ID
    user_sessions[user_id] = block_num

# === –í—ñ–¥–º—ñ—Ç–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ ===
def mark_task_done(row):
    day_sheet.update_cell(row, 9, "TRUE")  # 9 ‚Äî –í–∏–∫–æ–Ω–∞–Ω–æ

# === –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ===
async def send_reminder(user_id, task, reminder, row):
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text='‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ')]],
        resize_keyboard=True
    )
    await bot.send_message(
        user_id,
        f"–ó–∞–≤–¥–∞–Ω–Ω—è: {task}\n–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminder}\n\n–ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω–∏ ¬´‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ¬ª.",
        reply_markup=kb
    )
    user_sessions[user_id] = row

def schedule_reminders_for_user(user_id, tasks):
    for t in tasks:
        if not t["time"]:
            continue  # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –±–µ–∑ —á–∞—Å—É
        remind_time = datetime.strptime(f"{get_today()} {t['time']}", '%Y-%m-%d %H:%M').replace(tzinfo=UA_TZ)
        now = now_ua()
        if remind_time <= now:
            continue  # –ß–∞—Å –º–∏–Ω—É–≤
        scheduler.add_job(
            send_reminder,
            'date',
            run_date=remind_time,
            args=[user_id, t["task"], t["reminder"], t["row"]],
            id=f"{user_id}-{t['row']}-{int(remind_time.timestamp())}",
            replace_existing=True
        )

# === aiogram –æ–±—Ä–æ–±–Ω–∏–∫–∏ ===

@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text='–†–æ–∑–ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å')]],
        resize_keyboard=True
    )
    await message.answer("–í—ñ—Ç–∞—é! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–†–æ–∑–ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å¬ª —â–æ–± –≤–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–ª–æ–∫—ñ–≤.", reply_markup=kb)

@dp.message(lambda msg: msg.text and msg.text.strip().lower() == '—Ä–æ–∑–ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å')
async def choose_blocks_count(message: types.Message):
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text='6'), types.KeyboardButton(text='7')],
            [types.KeyboardButton(text='8'), types.KeyboardButton(text='9')]
        ],
        resize_keyboard=True
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–ª–æ–∫—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:", reply_markup=kb)

@dp.message(F.text.in_(['6', '7', '8', '9']))
async def on_blocks_count_chosen(message: types.Message):
    blocks_count = message.text.strip()
    copy_template_blocks_to_today(blocks_count)
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=f"{b} –±–ª–æ–∫")] for b in get_blocks_for_today()],
        resize_keyboard=True
    )
    await message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –±–ª–æ–∫:", reply_markup=kb)

@dp.message(F.text.regexp(r'^\d+ –±–ª–æ–∫$'))
async def select_block(message: types.Message):
    block_num = message.text.split()[0]
    user_id = message.from_user.id
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –±–ª–æ–∫ –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π
    today = get_today()
    records = day_sheet.get_all_records()
    for rec in records:
        if str(rec["–î–∞—Ç–∞"]) == today and str(rec["–ë–ª–æ–∫"]) == str(block_num) and rec["Telegram ID"]:
            if str(rec["Telegram ID"]) == str(user_id):
                await message.answer("–¶–µ–π –±–ª–æ–∫ –≤–∂–µ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–∏–π –∑–∞ –≤–∞–º–∏.")
                return
            else:
                await message.answer("–¶–µ–π –±–ª–æ–∫ –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π —ñ–Ω—à–∏–º –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–æ–º.")
                return
    # –ü—Ä–∏–≤'—è–∑—É—î–º–æ
    assign_user_to_block(block_num, user_id)
    await message.answer(f"–°—É–ø–µ—Ä! –¢–≤–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤ –±–ª–æ—Ü—ñ {block_num} üëá", reply_markup=types.ReplyKeyboardRemove())

    tasks = get_tasks_for_block(block_num)
    if not tasks:
        await message.answer("–ó–∞–≤–¥–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ –±–ª–æ–∫—É.")
        return
    tasks_text = "\n".join([f"‚Äî {t['time']}: {t['reminder']}" for t in tasks if t["time"]])
    await message.answer(f"–Ø –±—É–¥—É –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –ø—Ä–æ –∫–æ–∂–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è —É –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —á–∞—Å. –û—Å—å —Ç–≤—ñ–π —Å–ø–∏—Å–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:\n\n{tasks_text}")

    schedule_reminders_for_user(user_id, tasks)

@dp.message(F.text == '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ')
async def mark_done(message: types.Message):
    user_id = message.from_user.id
    row = user_sessions.get(user_id)
    if not row:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    mark_task_done(row)
    await message.answer("–í—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
    user_sessions[user_id] = None

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
