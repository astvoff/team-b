import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = os.environ.get("TOKEN")
user_state = {}

TASKS = {
    6: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OL–•", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""]
    },
    7: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OL–•", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"]
    },
    8: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OL–•", "–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞"],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "8": ["–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""]
    },
    9: {
        "1": ["–ß–µ—Ä–≥–æ–≤–∏–π (-a)", "–í—ñ—Ç—Ä–∏–Ω–∏/–®–æ—É—Ä—É–º–∏", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "2": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–π—Ç—É", "–ó–∞–ø–∏—Ç–∏ –°–∞–π—Ç—É"],
        "3": ["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à—ñ", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "4": ["OL–•", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "5": ["–¶—ñ–Ω–Ω–∏–∫–∏", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "6": ["–ö–∞—Å–∞"],
        "7": ["–ó–≤—ñ—Ç-–≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–ø–∏—Ç–∏ \"–ù–æ–≤–∞ –¢–µ—Ö–Ω—ñ–∫–∞\"", "–ü—Ä–∏–π–æ–º–∫–∞ —Ç–æ–≤–∞—Ä—É"],
        "8": ["–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å", "–°—Ç—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤", "–ó–∞–ø–∏—Ç–∏ \"–ê–∫—Å–∏\""],
        "9": ["–°—Ç–∞–Ω–∏ —Ç–µ—Ö–Ω—ñ–∫–∞ —ñ —Ç–µ–ª.", "–ó–∞—Ä—è–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤"]
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = {"state": "start"}
    kb = [[KeyboardButton("‚ñ∂Ô∏è –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è")]]
    await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è¬ª, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = {"state": "workers"}
    kb = [[KeyboardButton(str(i))] for i in TASKS.keys()]
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –Ω–∞ –∑–º—ñ–Ω—ñ:", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

async def select_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    workers = int(update.message.text)
    user_state[user_id].update({"workers": workers, "state": "block"})
    blocks = TASKS[workers]
    kb = [[KeyboardButton(str(i))] for i in blocks.keys()]
    kb.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –±–ª–æ–∫:", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

async def confirm_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    block = update.message.text
    user_state[user_id].update({"block": block, "state": "confirm_block"})
    kb = [
        [KeyboardButton(f"‚úÖ –¢–∞–∫, –±–ª–æ–∫ {block}")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    await update.message.reply_text(
        f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ –æ–±—Ä–∞–ª–∏ –±–ª–æ–∫ {block}? –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–∏—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞.",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
    )

async def block_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    workers = user_state[user_id]["workers"]
    block = user_state[user_id]["block"]
    tasks = TASKS[workers][block]
    user_state[user_id].update({"state": "tasks", "current_tasks": set(tasks), "completed_tasks": set()})
    kb = [[KeyboardButton(t)] for t in tasks]
    kb.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è:",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
    )

async def task_instruction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    workers = user_state[user_id]["workers"]
    block = user_state[user_id]["block"]
    tasks = TASKS[workers][block]
    if text in tasks and text not in user_state[user_id]["completed_tasks"]:
        user_state[user_id]["state"] = "task_detail"
        user_state[user_id]["current_task"] = text
        kb = [[KeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ")], [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
        await update.message.reply_text(f"–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è ¬´{text}¬ª", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))
    elif text in user_state[user_id]["completed_tasks"]:
        await update.message.reply_text("–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ!")

async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if "current_task" in user_state[user_id]:
        task = user_state[user_id]["current_task"]
        user_state[user_id]["completed_tasks"].add(task)
        del user_state[user_id]["current_task"]
        workers = user_state[user_id]["workers"]
        block = user_state[user_id]["block"]
        tasks = TASKS[workers][block]
        left_tasks = [t for t in tasks if t not in user_state[user_id]["completed_tasks"]]
        user_state[user_id]["state"] = "tasks"
        if left_tasks:
            kb = [[KeyboardButton(t)] for t in left_tasks]
            kb.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
            await update.message.reply_text(f"–ó–∞–≤–¥–∞–Ω–Ω—è ¬´{task}¬ª –≤–∏–∫–æ–Ω–∞–Ω–æ! –û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–µ:", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))
        else:
            await update.message.reply_text("–í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ! –î—è–∫—É—î–º–æ üéâ")
    else:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è.")

async def route(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    # –°–¢–ê–†–¢
    if text == "/start":
        return await start(update, context)

    state = user_state.get(user_id, {}).get("state", "start")

    # –ù–∞ –∫–æ–∂–Ω–æ–º—É –µ—Ç–∞–ø—ñ: —è–∫—â–æ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫—Ä–æ–∫
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        if state == "block":
            return await main_menu(update, context)
        if state == "confirm_block":
            return await select_block(update, context)
        if state == "tasks":
            return await confirm_block(update, context)
        if state == "task_detail":
            return await block_tasks(update, context)

    # –†–æ–∑–ø–æ—á–∞—Ç–∏ –¥–µ–Ω—å
    if text == "‚ñ∂Ô∏è –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è":
        return await main_menu(update, context)

    # –í–∏–±—ñ—Ä –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤
    if state == "workers" and text.isdigit() and int(text) in TASKS:
        return await select_block(update, context)

    # –í–∏–±—ñ—Ä –±–ª–æ–∫—É
    if state == "block" and text in TASKS[user_state[user_id]["workers"]]:
        return await confirm_block(update, context)

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±–ª–æ–∫—É
    if state == "confirm_block" and text.startswith("‚úÖ –¢–∞–∫, –±–ª–æ–∫ "):
        return await block_tasks(update, context)

    # –í–∏–±—ñ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è
    if state == "tasks" and text in TASKS[user_state[user_id]["workers"]][user_state[user_id]["block"]]:
        return await task_instruction(update, context)

    # –í—ñ–¥–º—ñ—Ç–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    if state == "task_detail" and text == "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ":
        return await mark_done(update, context)

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, route))
    app.run_polling()

if __name__ == "__main__":
    main()